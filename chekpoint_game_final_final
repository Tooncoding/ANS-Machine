//Update checkpoint (by Toon)
//Thu 9 Nov 12:08
#include <TrueRandom.h>
int trigPin = 5;
int echoPin = 4;
int score = 0;
int answer[8] = {1,2,1,3,3,2,4,1};
String code[8] = {"ABACCBDA"," BACCBDA","  ACCBDA","   CCBDA","    CBDA","     BDA","      DA","       A"};
String pointer[8] = {"^       "," ^      ","  ^     ","   ^    ","    ^   ","     ^  ","      ^ ","       ^"};
int show = 0;
void setup() {
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  Serial.begin(9600);
}
int Read() {
  int duration, distance;
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  distance = (duration / 2) / 29.41;
  //Serial.print(distance);
  //Serial.println(" cm");
  return distance;
  //Range 0-250
}

int SelectABCD() {
  int Answer ; //A=1, B=2, C=3 and D=4
  delay(100);
  boolean AlreadyAnswer = false;
  while (AlreadyAnswer == false) {
    int distance = Read();
    int check1 = 0;
    int check2 = 0;
    int check3 = 0;
    int check4 = 0;
    delay(500);
    for(int freeze1 = 0; freeze1 < 3; freeze1 ++){
      if (distance < 10) {
        Answer = 1;
        check1 += 1;
      }
      else if (distance > 10 and distance < 20) {
        Answer = 2;
        check2 += 1;
  
      }
      else if (distance > 20 and distance < 30) {
        Answer = 3;
        check3 += 1;
  
      }
      else if (distance > 30 and distance < 40) {
        Answer = 4;
        check4 += 1;
  
      }
      delay(300);
    }
    if(check1 == 3){
      AlreadyAnswer = true; 
      if (show == 1){
        Serial.println("A");
    }
    }
    else if (check2 == 3){ 
      AlreadyAnswer = true;
      if (show == 1){
        Serial.println("B");
    }
    }
    else if (check3 == 3){
      AlreadyAnswer = true;
      if (show == 1){
        Serial.println("C");
    }
    }
    else if (check4 == 3){
      AlreadyAnswer = true;
      if (show == 1){
        Serial.println("D");
      } 
  }
  }
  return Answer;
}
int quickSelectABCD() {
  int Answer ; //A=1, B=2, C=3 and D=4
  delay(100);
  boolean AlreadyAnswer = false;
  while (AlreadyAnswer == false) {
    int distance = Read();
    int check1 = 0;
    int check2 = 0;
    int check3 = 0;
    int check4 = 0;
    delay(100);
    for(int freeze1 = 0; freeze1 < 3; freeze1 ++){
      if (distance < 10) {
        Answer = 1;
        check1 += 1;
      }
      else if (distance > 10 and distance < 20) {
        Answer = 2;
        check2 += 1;
  
      }
      else if (distance > 20 and distance < 30) {
        Answer = 3;
        check3 += 1;
  
      }
      else if (distance > 30 and distance < 40) {
        Answer = 4;
        check4 += 1;
  
      }
      delay(50);
    }
    if(check1 == 3){
      AlreadyAnswer = true;
       if (show == 1){
       Serial.println("A");
       }
    }
    else if (check2 == 3){
      AlreadyAnswer = true;
       if (show == 1){
       Serial.println("B");
       }
    }
    else if (check3 == 3){
      AlreadyAnswer = true;
       if (show == 1){
      Serial.println("C");
    }
    }
    else if (check4 == 3){ 
      AlreadyAnswer = true;
       if (show == 1){
      Serial.println("D");
    }
  }

  return Answer;
}
}
void checkpoint(){
  int r_game = TrueRandom.random(1,4);
  Serial.println(r_game);
  Serial.println("It's time to break");
  Serial.println("Let's play a mini-game");
  if(r_game == 1){
    Crack_code();
  }
  if(r_game == 2){
    swipe();
  }
  if(r_game == 3){
    fill_in_blank();
}
}
void Crack_code(){
  boolean pass = false;
  Serial.println("Instructions:");
  Serial.println("Crack the following code");
  delay(1000);
  while (pass != true) {
    Serial.println(code[0]);
    Serial.println(pointer[0]);
    int ans = SelectABCD();
    if(ans == 1){
      pass = true;
  }
  else{
      Serial.println("Try Again");
    }
  }
  pass = false;
  Serial.println(code[1]);
  Serial.println(pointer[1]);
  while (pass != true) {
    if(SelectABCD() == answer[1]){
      pass = true;
  }
  else{
      Serial.println("Try Again");
    }
  }
  pass = false;
  Serial.println(code[2]);
  Serial.println(pointer[2]);
  while (pass != true) {
   if(SelectABCD() == answer[2]){
     pass = true;
  }
  else{
      Serial.println("Try Again");
    }
  }
  pass = false;
  Serial.println(code[3]);
  Serial.println(pointer[3]);
  while (pass != true) {
   if(SelectABCD() == answer[3]){
     pass = true;
  }
    else{
      Serial.println("Try Again");
    }
  }
  pass = false;
  Serial.println(code[4]);
  Serial.println(pointer[4]);
  while (pass != true) {
   if(SelectABCD() == answer[4]){
     pass = true;
  }
  else{
      Serial.println("Try Again");
    }
  }
  pass = false;
  while (pass != true) {
   Serial.println(code[5]);
   Serial.println(pointer[5]);
   if(SelectABCD() == answer[5]){
    pass = true;
  }
  else{
      Serial.println("Try Again");
    }
  }
  pass = false;
  Serial.println(code[6]);
  Serial.println(pointer[6]);
  while (pass != true) {
   
   if(SelectABCD() == answer[6]){
    pass = true;
  }
  else{
      Serial.println("Try Again");
    }
  }
  pass = false;
  Serial.println(code[7]);
  Serial.println(pointer[7]);
  while (pass != true) {
   if(SelectABCD() == answer[7]){
    pass = true;
  }
  else{
    Serial.println("Try Again");
  }
  }
if (pass == true) {
  Serial.println("Congratulations! You win!!!");
}
  show = 0;
}
void swipe(){
  int check = 0;
  int check2 = 0;
  int pass = false;
  int v_avg;
  int v_avg2;
  int v_avg3;
  int start_dis;
  int end_dis;
  int ttime1;
  int ttime2;
  int ttime3;
  int ttime4;
  int ttime5;
  int ttime6;
  //check variable at every point
  Serial.println("Instructions:");
  Serial.println("Swipe your hand");
  Serial.println("From A to D");
  delay(500);
  ttime1 = millis();
  while (quickSelectABCD() != 4) {
    if(quickSelectABCD() == 1){
      check = 1;
  } 
  }
  ttime2 = millis();
  delay(300);
  v_avg = 30/((ttime2-ttime1)*0.001);
  //For checking the accuray of the game
  //Serial.println(ttime1);
  // Serial.println(ttime2);
  //Serial.println((v_avg)*10);
  //Serial.println(check);
  if(check == 1 and v_avg*10 >= 100){
    pass = true;
  }
  else{
    check = 0;
    Serial.println("Try again");
    }
  if(pass == true){
    pass = false ;
    Serial.println("Great!");
    delay(500);
    Serial.println("Level UP >>>");
    delay(300);
    Serial.println("Swipe your hand");
    Serial.println("From A to D");
    delay(300);
    Serial.println("Faster");
    ttime3 = millis();
    check = 0;
    while (quickSelectABCD() !=4) {
    if(quickSelectABCD() == 1){
      check = 1;
    } 
    }
    ttime4 = millis();
    v_avg2 = 30/((ttime4-ttime3)*0.001);
    if(check == 1 and v_avg2*10 >= 120){
      pass = true;
  }
    else {
      Serial.println("Try again");
    }
    if(pass == true){
      pass = false;
      Serial.println("Great!");
      delay(500);
      Serial.println("Level UP >>>>>>>>>>>>>");
      delay(300);
      Serial.println("Last level !!!");
      Serial.println("Swipe your hand");
      Serial.println("From A to D");
      delay(300);
      Serial.println("More fasterrrrrrrrrrrr");
      check =0;
      ttime5 = millis();
      while (quickSelectABCD() !=4) {
      if(quickSelectABCD() == 1){
        check = 1;
      } 
      }
      ttime6 = millis();
      
      v_avg3 = 30/((ttime6-ttime5)*0.001);
      if(check == 1 and v_avg3*10 >= 150){
         pass = true;
      }
      else {
      Serial.println("Try again");
    }
      if(pass == true){
        pass = false;
        Serial.println("Congratulations, You are super fast !");
    }
      }
}
  show = 0;
}
void fill_in_blank(){
   int score = 0;
   show = 1;
   Serial.println("Instructions: ");
   delay(300);
   Serial.println("Fill in the missing alphabet");
   delay(300);
   Serial.println("You have 2 seconds for each puzzle");
   delay(300);
   Serial.println("Pin_apple");
   delay(300);
   Serial.print("A) i          ");
   Serial.println("B) e        ");
   Serial.print("C) t          ");
   Serial.println("D) d        ");
  delay(2000);
  if(SelectABCD() == 2){
    Serial.println("score +1");
    score += 1;
  }
  else {
    Serial.println("Incorrect");
  }
  Serial.println("Su_ermarket");
  delay(500);
  Serial.print("A) f         ");
  Serial.println("B) p        ");
  Serial.print("C) s          ");
  Serial.println("D) b        ");
delay(2000);
  if(SelectABCD() == 2){
    Serial.println("score +1");
    score += 1;
  }
  else {
    Serial.println("Incorrect");
  }
  Serial.println("Billion_ire");
  delay(500);
  Serial.print("A) o          ");
  Serial.println("B) e        ");
  Serial.print("C) a          ");
  Serial.println("D) f        ");
delay(2000);
  if(SelectABCD() == 3){
    Serial.println("score +1");
    score += 1;
  }
  else {
    Serial.println("Incorrect");
  }
  Serial.println("Mo_ntain");
  delay(500);
  Serial.print("A) e          ");
  Serial.println("B) a        ");
  Serial.print("C) u          ");
  Serial.println("D) o        ");
  delay(2000);
  if(SelectABCD() == 3){
    Serial.println("score +1");
    score += 1;
  }
  else {
    Serial.println("Incorrect");
  }
  Serial.println("De_tination");
  delay(500);
  Serial.print("A) s        ");
  Serial.println("B) x      ");
  Serial.print("C) p        ");
  Serial.println("D) c      ");
  delay(2000);
  if(SelectABCD() == 1){
    Serial.println("score +2");
    score += 2;
  }
  else {
    Serial.println("Incorrect");
  }
  Serial.println("Bonus one!");
  delay(300);
  Serial.println("E_gen va_ues");
  delay(500);
  Serial.print("A) u,g        ");
  Serial.println("B) t,l      ");
  Serial.print("C) r,n        ");
  Serial.println("D) i,l      ");
  delay(2000);
  if(SelectABCD() == 4){
    Serial.println("score +3");
    score += 3;
  }
  else {
    Serial.println("Incorrect");
  }
  Serial.println("Your score is ");
  Serial.println(score); 
  score = 0;
  show = 0;
 }
 
void loop() {
  int check = 0;
  int distance = Read();
  int start;
  Serial.println("Move your hand to the zone for 3s.");
  Serial.println("to select your choice");
  checkpoint();
  delay(1000000);
  //Serial.println("******");
  //delay(1000);
  //Serial.println(distance);
}

