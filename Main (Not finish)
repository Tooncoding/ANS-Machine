
/*TABLE OF CONTENT
  // * 1. Chair detection (Ultrasonic_Underchair)
  // * 2. Confirmation Light (Light_on/Light_off) (Ultrasonic_Onthetable)(AC light dimmer)
  // * 3. Welcome sentence (OLED display)
  // * 4. Timer (RTC)
  // * 5. Music Selector (DFPlayer Mini MP3 Player Module)
  // * 6. Fan (Motor driver)
  // * 7. Checkpoint game (Ultrasonic_Onthetable) (Discuss about loop with toon)
  // * 8. Vending Machine (Motor driver)
*/

//********************************************************************************************************************//
//--------------------------------------------------------------------------------------------------------------------//
//----------------------------------Initialize the value for each function:-------------------------------------------//
//--------------------------------------------------------------------------------------------------------------------//
//********************************************************************************************************************//

/*
// * 1. Chair detection (Ultrasonic_Underchair)
int Chairdet_TrigPin = ??;
int Chairdet_EchoPin = ??;

// * 2. Confirmation Light (Light_on/Light_off) (Ultrasonic_Onthetable)(AC light dimmer)
#include <RBDdimmer.h>
#define USE_SERIAL  Serial
#define outputPin  0
#define zerocross  0
dimmerLamp dimmer(outputPin); //initialase port for dimmer for MEGA, Leonardo, UNO, Arduino M0, Arduino Zero
int Intensity = 0;
*/

// * 3. Welcome sentence (OLED display)
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for SSD1306 display connected using software SPI (default case):
#define OLED_MOSI   11
#define OLED_CLK   13
#define OLED_DC    7
#define OLED_CS    10
#define OLED_RESET 8
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT,
                         OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);
#define NUMFLAKES     10 // Number of snowflakes in the animation example

// * 4. Timer (URTC)
#include <RTClib.h>
#include <Wire.h>
#include <TimeLib.h>

RTC_DS1307 RTC;
 
unsigned long LastUnSyncTime = 0;

time_t time_provider()
{
    return RTC.now().unixtime();  
}


/*
// * 5. Music Selector (DFPlayer Mini MP3 Player Module)
#include "Arduino.h"
#include "SoftwareSerial.h"
#include "DFRobotDFPlayerMini.h"
SoftwareSerial mySoftwareSerial(10, 11); // RX, TX
DFRobotDFPlayerMini myDFPlayer;
void printDetail(uint8_t type, int value);

// * 6. Fan (Motor driver - Port Left)
int EN_FAN = ??;
int IN1_FAN = ??;
int IN2_FAN = ??;*/

// * 7. Checkpoint game (Ultrasonic_Onthetable)
int CheckPoint_trigPin = 5;
int CheckPoint_echoPin = 4;
int score = 0;
int answer[8] = {1, 2, 1, 3, 3, 2, 4, 1};

/*
// * 8. Vending Machine (Motor driver - Port Right)
int EN_VM = ??;
int IN3_VM = ??;
int IN4_VM = ??;
*/

//********************************************************************************************************************//
//--------------------------------------------------------------------------------------------------------------------//
//-------------------------------------------------------Set up-------------------------------------------------------//
//--------------------------------------------------------------------------------------------------------------------//
//********************************************************************************************************************//

void setup() {
  /*
  // * 1. Chair detection (Ultrasonic_Underchair)---------------------------------------------------------
  pinMode(Chairdet_Ultra_TrigPin, OUTPUT);
  pinMode(Chairdet_Ultra_EchoPin, INPUT);
  
  // * 2. Confirmation Light (Light_on/Light_off) (Ultrasonic_Onthetable)(AC light dimmer)----------------
  USE_SERIAL.begin(9600);
  dimmer.begin(NORMAL_MODE, ON); //dimmer initialisation: name.begin(MODE, STATE)
  */
  
  // * 3. Welcome sentence (OLED display)------------------------------------------------------------------
  //Screen setup
  Serial.begin(9600);

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if (!display.begin(SSD1306_SWITCHCAPVCC)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;); // Don't proceed, loop forever
  }

  delay(2000);
  display.clearDisplay();

  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 10);
  // Display static text
  delay(5000);
  display.clearDisplay();

  display.println(" hi,");
  display.display();
  delay(5000);

  
  // * 4. Timer (RTC)---------------------------------------------------------------
  Serial.begin(9600);
  Wire.begin();  //sets up the I2C
  RTC.begin();   //initializes the I2C to the RTC
  
  //  Set the RTC Time to 5:10:30 Nov 3 2020
  RTC.adjust(DateTime(2020,12,3,0,00,00));

  /*
  // * 5. Music Selector (DFPlayer Mini MP3 Player Module)--------------------------------------------------
  mySoftwareSerial.begin(9600);
  Serial.begin(115200);
  if (!myDFPlayer.begin(mySoftwareSerial)) {  //Use softwareSerial to communicate with mp3.
    Serial.println(F("Unable to begin:"));
    Serial.println(F("1.Please recheck the connection!"));
    Serial.println(F("2.Please insert the SD card!"));
    while (true);
  }
  myDFPlayer.setTimeOut(500); //Set serial communictaion time out 500ms
  //----Set volume----
  myDFPlayer.volume(30);  //Set volume value (0~30).
  myDFPlayer.volumeUp(); //Volume Up
  myDFPlayer.volumeDown(); //Volume Down

  //----Set different EQ----
  myDFPlayer.EQ(DFPLAYER_EQ_NORMAL);
  //  myDFPlayer.EQ(DFPLAYER_EQ_POP);
  //  myDFPlayer.EQ(DFPLAYER_EQ_ROCK);
  //  myDFPlayer.EQ(DFPLAYER_EQ_JAZZ);
  //  myDFPlayer.EQ(DFPLAYER_EQ_CLASSIC);
  //  myDFPlayer.EQ(DFPLAYER_EQ_BASS);

  //----Set device we use SD as default----
  //  myDFPlayer.outputDevice(DFPLAYER_DEVICE_U_DISK);
  myDFPlayer.outputDevice(DFPLAYER_DEVICE_SD);
  //  myDFPlayer.outputDevice(DFPLAYER_DEVICE_AUX);
  //  myDFPlayer.outputDevice(DFPLAYER_DEVICE_SLEEP);
  //  myDFPlayer.outputDevice(DFPLAYER_DEVICE_FLASH);

  //----Mp3 control----
  //  myDFPlayer.sleep();     //sleep
  //  myDFPlayer.reset();     //Reset the module
  //  myDFPlayer.enableDAC();  //Enable On-chip DAC
  //  myDFPlayer.disableDAC();  //Disable On-chip DAC
  //  myDFPlayer.outputSetting(true, 15); //output setting, enable the output and set the gain to 15

  //----Mp3 play----
  myDFPlayer.next();  //Play next mp3
  delay(1000);
  myDFPlayer.previous();  //Play previous mp3
  delay(1000);
  myDFPlayer.play(1);  //Play the first mp3
  delay(1000);
  myDFPlayer.loop(1);  //Loop the first mp3
  delay(1000);
  myDFPlayer.pause();  //pause the mp3
  delay(1000);
  myDFPlayer.start();  //start the mp3 from the pause
  delay(1000);
  myDFPlayer.playFolder(15, 4);  //play specific mp3 in SD:/15/004.mp3; Folder Name(1~99); File Name(1~255)
  delay(1000);
  myDFPlayer.enableLoopAll(); //loop all mp3 files.
  delay(1000);
  myDFPlayer.disableLoopAll(); //stop loop all mp3 files.
  delay(1000);
  myDFPlayer.playMp3Folder(4); //play specific mp3 in SD:/MP3/0004.mp3; File Name(0~65535)
  delay(1000);
  myDFPlayer.advertise(3); //advertise specific mp3 in SD:/ADVERT/0003.mp3; File Name(0~65535)
  delay(1000);
  myDFPlayer.stopAdvertise(); //stop advertise
  delay(1000);
  myDFPlayer.playLargeFolder(2, 999); //play specific mp3 in SD:/02/004.mp3; Folder Name(1~10); File Name(1~1000)
  delay(1000);
  myDFPlayer.loopFolder(5); //loop all mp3 files in folder SD:/05.
  delay(1000);
  myDFPlayer.randomAll(); //Random play all the mp3.
  delay(1000);
  myDFPlayer.enableLoop(); //enable loop.
  delay(1000);
  myDFPlayer.disableLoop(); //disable loop.
  delay(1000);

    //----Read imformation----
  Serial.println(myDFPlayer.readState()); //read mp3 state
  Serial.println(myDFPlayer.readVolume()); //read current volume
  Serial.println(myDFPlayer.readEQ()); //read EQ setting
  Serial.println(myDFPlayer.readFileCounts()); //read all file counts in SD card
  Serial.println(myDFPlayer.readCurrentFileNumber()); //read current play file number
  Serial.println(myDFPlayer.readFileCountsInFolder(3)); //read file counts in folder SD:/03
  
  // * 6. Fan (Motor driver)----------------------------------------------------------------------------------------------------
  pinMode(EN_FAN, OUTPUT);
  pinMode(IN1_FAN, OUTPUT);
  pinMode(IN2_FAN, OUTPUT);
  */
  
  // * 7. Checkpoint game (Ultrasonic_Onthetable)--------------------------------------------------------------------------------
  pinMode(CheckPoint_trigPin, OUTPUT);
  pinMode(CheckPoint_echoPin, INPUT);
  Serial.begin(9600);

  /*
  // * 8. Vending Machine (Motor driver)
  pinMode(EN_VM, OUTPUT);
  pinMode(IN3_VM, OUTPUT);
  pinMode(IN4_VM, OUTPUT);
  */
}


//********************************************************************************************************************//
//--------------------------------------------------------------------------------------------------------------------//
//----------------------------------------------------Function--------------------------------------------------------//
//--------------------------------------------------------------------------------------------------------------------//
//********************************************************************************************************************//

/*TABLE OF CONTENT
  // * 0. Selection Code 
            --> SelectYN()
            --> SelectABCD()
            --> quicSelect()
  // * 1. Chair detection (Ultrasonic_Underchair)
  // * 2. Turn Light on/offs (Light_on/Light_off) (Ultrasonic_Onthetable)(AC light dimmer)
  // * 3. Welcome sentence (OLED display) (Ultrasonic)
  // * 4. Timer
  // * 5. Music Selector (DFPlayer Mini MP3 Player Module)
  // * 6. Fan (Motor driver)
  // * 7. Checkpoint game (Ultrasonic_Onthetable) (Discuss about loop with toon)
  // * 8. Vending Machine (Motor driver)


/*TABLE FOR FUNCTION
   Light_on //Hardware
   Light_off //Hardware
   Music //Hardware
   int Read() //Hardware
   int SelectABCD() 
   int quickSelectABCD() 
   void checkpoint()
   void Crack_code()
   void swipe()
   void fill_in_blank()
   void snack(float ReadingTime) ////Hardware
*/

//********************************************************************************************************************//
// * 0. Selection Code 


int SelectABCD() {
  int Answer ; //A=1, B=2, C=3 and D=4
  delay(100);
  boolean AlreadyAnswer = false;
  while (AlreadyAnswer == false) {
    int distance = Read(CheckPoint_trigPin, CheckPoint_echoPin);
    int check1 = 0;
    int check2 = 0;
    int check3 = 0;
    int check4 = 0;
    delay(500);
    for(int freeze1 = 0; freeze1 < 3; freeze1 ++){
      if (distance < 10) {
        Answer = 1;
        check1 += 1;    }
      else if (distance > 10 and distance < 20) {
        Answer = 2;
        check2 += 1;    }
      else if (distance > 20 and distance < 30) {
        Answer = 3;
        check3 += 1;    }
      else if (distance > 30 and distance < 40) {
        Answer = 4;
        check4 += 1;    }
      delay(500);   
      }
    
    if(check1 == 3){
      display.println(F("A"));
      display.display();
      AlreadyAnswer = true;   }
    else if (check2 == 3){
      display.println(F("B"));
      display.display();
      AlreadyAnswer = true;   }
    else if (check3 == 3){
      display.println(F("C"));
      display.display();
      AlreadyAnswer = true;   }
    else if (check4 == 3){
      display.println(F("D"));
      display.display();
      AlreadyAnswer = true;   }
  }

  return Answer;    }

/*
int Sure() {
  display.println(F("Are you sure ?"));
  display.display();
  delay(3000);
  display.println(F("A) yes"));
  display.println(F("C) no"));
  display.display();
  int Answer ; //Yes=1, No=0
  boolean AlreadyAnswer = false;
  int check1 = 0;
  int check2 = 0;
  while (AlreadyAnswer == false) {
    int distance = Read();
    // for loop is used to make sure users want to select that choice
    for(int freeze = 0; freeze < 3; freeze ++){
      if (distance < 20) {
        Answer = 1;//YES
        check1 += 1;      }
      else if (distance > 20 and distance < 40) {
        Answer = 0;//NO
        check2 += 1;      }
    delay(800);   }
    
    if(check1 == 3){
      display.println(F("YES"));
      display.display();
      delay(1000);
      display.clearDisplay();
      display.display();
      display.setCursor(0, 10);
      display.println(F("Good Bye ;-;"));
      display.display();
      AlreadyAnswer = true;
    }
    else if(check2 == 3){
      display.println(F("NO"));
      display.display();
      delay(500);
      Sure();
      AlreadyAnswer = true;
    }
  }}

*/

int SelectYN() {
  int Answer ; //Yes=1, No=0
  boolean AlreadyAnswer = false;
  int check1 = 0;
  int check2 = 0;
  while (AlreadyAnswer == false) {
    int distance = Read(CheckPoint_trigPin, CheckPoint_echoPin);
    // for loop is used to make sure users want to select that choice
    for(int freeze = 0; freeze < 3; freeze ++){
      if (distance < 20) {
        Answer = 1;//YES
        check1 += 1;      }
      else if (distance > 20 and distance < 40) {
        Answer = 0;//NO
        check2 += 1;      }
    delay(500);
    }
    if(check1 == 3){
      display.println(F("YES"));
      display.display();
      AlreadyAnswer = true;   }
    else if(check2 == 3){
      display.println(F("NO"));
      display.display();
      delay(500);
//      Sure();
      AlreadyAnswer = true;
    }
  }

  return Answer;    }


//********************************************************************************************************************//
// * 1. Chair detection (Ultrasonic_Underchair)-----------------------------------------------------------------------//

int Read(int trigPin, int echoPin) {
  int duration, distance;
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  distance = (duration / 2) / 29.41;
  Serial.print(distance);
  Serial.println(" cm");
  return distance;
  //Range 0-250
}

/*
int Chair_det() {
  long duration, distance, newdistance;
  long tempo;
  long limit = 20;
  digitalWrite(Chairdet_trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(Chairdet_trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  distance = (duration/2) / 29.41;
  
  while (true){
    tempo = distance;
//    Serial.print(tempo);
//    Serial.println("tempo cm");
    delay(500);
    digitalWrite(trigPin, LOW);
    delayMicroseconds(2);
    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);
    duration = pulseIn(echoPin, HIGH);
    newdistance = (duration/2) / 29.41;
//    Serial.print(newdistance);
//    Serial.println("new cm");
    
    if (abs(newdistance-tempo) > limit){
      Serial.println("Activate");
      return 1;
      
      break;
    }
   }
   Serial.println("----------");
    
}}
*/

//********************************************************************************************************************//
// * 2. Light_on/Light_off

/*
void Light_on() {
  Intensity = map(650, 1, 1024, 100, 0); // analogRead(analog_pin), min_analog, max_analog, 100%, 0%);
  USE_SERIAL.println(Intensity);
  dimmer.setPower(Intensity); // 100%
}
void Light_off() {
  Intensity = map(0, 1, 1024, 100, 0); // analogRead(analog_pin), min_analog, max_analog, 100%, 0%);
  USE_SERIAL.println(Intensity);
  dimmer.setPower(Intensity); // 0%
}
*/


//********************************************************************************************************************//
// * 3. Welcome sentence (OLED display)


int Welcome() {

  display.setCursor(0, 0);
  display.clearDisplay();
  display.println(F("Welcome to ANS!!"));
  display.display();
  delay(1000);
  display.println(F("be prepare for the productive study"));
  display.display();
  delay(2000);
  display.clearDisplay();
  
  display.setCursor(0, 0);
  display.println(F("Instructions:"));
  display.println(F(""));
  display.display();
  delay(1000);
  display.println(F("Move your hand to the zone for 3s to select your choice"));
  display.display();
  delay(3000);
  display.clearDisplay();
  display.display();

  //conditions
  display.setCursor(0, 0);
  display.println(F("Are you ready ?"));
  display.display();
  delay(1000);
  display.println(F("A) yes"));
  display.println(F("C) no"));
  display.display();
  delay(500);
  SelectYN();
  delay(3000);

  //conditions
  display.clearDisplay();
  display.display();

  display.setCursor(0, 0);
  display.println(F("Choose your study time :"));
  display.display();
  delay(1000);
  display.println(F("A) 1.0 hrs"));
  display.println(F("B) 2.0 hrs"));
  display.println(F("C) 3.0 hrs"));
  display.println(F("D) 10 mins"));
  display.display();
  delay(500);
  int StudyTime = SelectABCD(); //1=A=10 mins //2=B=1.0hrs //3=C=2.0 hrs //4=D=3.0 hrs
  delay(4000);
  return StudyTime;

}


//********************************************************************************************************************//
// * 4. Timer (RTC)


void timer(int hour_chosen, int min_chosen, int sec_chosen) {
  //printchosen time
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println(F("The schosen time is :"));
  display.println(F(""));
  display.display();
  display.print(hour_chosen);
  display.println(F(" hrs, "));
  display.print(min_chosen);
  display.println(F(" mins, "));
  display.println(sec_chosen);
  display.println(F(" sec"));
  display.display();
  delay(4000);

  display.clearDisplay();
  display.setCursor(0, 0);
  display.println(F("study session start"));
  display.println(F("in..."));
  display.display();
  delay(2000);
  display.println(F("3"));
  display.display();
  delay(1000);
  display.println(F("2"));
  display.display();
  delay(1000);
  display.print(F("1"));
  display.display();
  delay(1000);
  display.clearDisplay();
  display.setCursor(0, 10);
  display.println(F("fighting ngub <3"));
  display.display();
  delay(5000);
  display.clearDisplay();
  
  RTC.adjust(DateTime(2020,12,3,0,00,00));
  
  while (true) {
    DateTime now = RTC.now();  //  Creating now object every loop?
   
    int hour_now = now.hour();
    int min_now = now.minute();
    int sec_now = now.second();
    
    //Print RTC time
    Serial.println("----------");
    Serial.print("now.hour:   ");
    Serial.println(hour_now);
    Serial.print("now.minute: ");
    Serial.println(min_now);
    Serial.print("now.second: ");
    Serial.println(sec_now);

    delay(2000);
    
  
    if (hour_chosen == hour_now and min_chosen == min_now and sec_chosen == sec_now){
      Serial.println("It's been 30 minutes");
      Serial.println("You made it to the first check point !");
      RTC.adjust(DateTime(2020,11,3,0,00,00));
      break;
  
    
    }}}




//********************************************************************************************************************//
//--------------------------------------------------------------------------------------------------------------------//
//------------------------------------------------------Main----------------------------------------------------------//
//--------------------------------------------------------------------------------------------------------------------//
//********************************************************************************************************************//




void loop() {

Serial.print(F("Start loop"));
////* 1. detect chair
//int activate = Chair_det();
//
//if (activate ==1){
//  // * 2. turn on light
//  Light_on();

  // * 3. Welcome massage + Time selection
  int StudyTime = Welcome();

  int hour_chosen;
  int min_chosen;
  int sec_chosen;

  if (StudyTime != 4){
    hour_chosen = StudyTime;
    min_chosen = 0;
    sec_chosen = 0;
  } 
  else{
    hour_chosen = 0;
    min_chosen = 0;
    sec_chosen = 10;
  }
  // * 4. Timer
  timer(hour_chosen, min_chosen, sec_chosen);
  
  delay(1000);

  
}







//********************************************************************************************************************//
// * 2. Confirmation Light (Light_on/Light_off) (Ultrasonic_Onthetable)(AC light dimmer)


//********************************************************************************************************************//
// * 3. Welcome sentence (OLED display)







