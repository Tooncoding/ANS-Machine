/*TABLE OF CONTENT
  // * 1. Chair detection (Ultrasonic_Underchair)
  // * 2. Confirmation Light (Light_on/Light_off) (Ultrasonic_Onthetable)(AC light dimmer)
  // * 3. Welcome sentence (LCD display)
  // * 4. Time setting (Ultrasonic_Onthetable)
  // * 5. Music Selector (DFPlayer Mini MP3 Player Module)
  // * 6. Fan (Motor driver)
  // * 7. Checkpoint game (Ultrasonic_Onthetable) (Discuss about loop with toon)
  // * 8. Vending Machine (Motor driver)
*/
///////////////////////////////////////////////////////////////////////

//Initialize the value for each function:


// * 1. Chair detection (Ultrasonic_Underchair)
int Chairdetection_TrigPin = ??;
int Chairdetection_EchoPin = ??;
// * 2. Confirmation Light (Light_on/Light_off) (Ultrasonic_Onthetable)(AC light dimmer)
#include <RBDdimmer.h>
#define USE_SERIAL  Serial
#define outputPin  0
#define zerocross  0
dimmerLamp dimmer(outputPin); //initialase port for dimmer for MEGA, Leonardo, UNO, Arduino M0, Arduino Zero
int Intensity = 0;
// * 3. Welcome sentence (LCD display)
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for SSD1306 display connected using software SPI (default case):
#define OLED_MOSI   11
#define OLED_CLK   13
#define OLED_DC    7
#define OLED_CS    10
#define OLED_RESET 8
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT,
                         OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);

#define NUMFLAKES     10 // Number of snowflakes in the animation example
// * 4. Time setting (Ultrasonic_Onthetable)
int Onthetable_TrigPin = ??;
int Onthetable_EchoPin = ??;
// * 5. Music Selector (DFPlayer Mini MP3 Player Module)
#include "Arduino.h"
#include "SoftwareSerial.h"
#include "DFRobotDFPlayerMini.h"
SoftwareSerial mySoftwareSerial(10, 11); // RX, TX
DFRobotDFPlayerMini myDFPlayer;
void printDetail(uint8_t type, int value);
// * 6. Fan (Motor driver - Port Left)
int EN_FAN = ??;
int IN1_FAN = ??;
int IN2_FAN = ??;
// * 7. Checkpoint game (Ultrasonic_Onthetable)
int trigPin = ??;
int echoPin = ??;
int score = 0;
int answer[8] = {1, 2, 1, 3, 3, 2, 4, 1};
// * 8. Vending Machine (Motor driver - Port Right)
int EN_VM = ??;
int IN3_VM = ??;
int IN4_VM = ??;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void setup() {
  // * 1. Chair detection (Ultrasonic_Underchair)
  pinMode(Chairdetection_TrigPin, OUTPUT);
  pinMode(Chairdetection_EchoPin, INPUT);
  // * 2. Confirmation Light (Light_on/Light_off) (Ultrasonic_Onthetable)(AC light dimmer)
  USE_SERIAL.begin(9600);
  dimmer.begin(NORMAL_MODE, ON); //dimmer initialisation: name.begin(MODE, STATE)
  // * 3. Welcome sentence (LCD display)
  //Screen setup
  Serial.begin(9600);

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if (!display.begin(SSD1306_SWITCHCAPVCC)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;); // Don't proceed, loop forever
  }

  delay(2000);
  display.clearDisplay();

  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 10);
  // Display static text
  delay(5000);
  display.clearDisplay();

  display.println(" hi,");
  display.display();
  delay(5000);
  // * 4. Time setting (Ultrasonic_Onthetable)
  pinMode(Onthetable_TrigPin, OUTPUT);
  pinMode(Onthetable_EchoPin, INPUT);
  // * 5. Music Selector (DFPlayer Mini MP3 Player Module)
  mySoftwareSerial.begin(9600);
  Serial.begin(115200);
  if (!myDFPlayer.begin(mySoftwareSerial)) {  //Use softwareSerial to communicate with mp3.
    Serial.println(F("Unable to begin:"));
    Serial.println(F("1.Please recheck the connection!"));
    Serial.println(F("2.Please insert the SD card!"));
    while (true);
  }
  myDFPlayer.setTimeOut(500); //Set serial communictaion time out 500ms
  //----Set volume----
  myDFPlayer.volume(30);  //Set volume value (0~30).
  myDFPlayer.volumeUp(); //Volume Up
  myDFPlayer.volumeDown(); //Volume Down

  //----Set different EQ----
  myDFPlayer.EQ(DFPLAYER_EQ_NORMAL);
  //  myDFPlayer.EQ(DFPLAYER_EQ_POP);
  //  myDFPlayer.EQ(DFPLAYER_EQ_ROCK);
  //  myDFPlayer.EQ(DFPLAYER_EQ_JAZZ);
  //  myDFPlayer.EQ(DFPLAYER_EQ_CLASSIC);
  //  myDFPlayer.EQ(DFPLAYER_EQ_BASS);

  //----Set device we use SD as default----
  //  myDFPlayer.outputDevice(DFPLAYER_DEVICE_U_DISK);
  myDFPlayer.outputDevice(DFPLAYER_DEVICE_SD);
  //  myDFPlayer.outputDevice(DFPLAYER_DEVICE_AUX);
  //  myDFPlayer.outputDevice(DFPLAYER_DEVICE_SLEEP);
  //  myDFPlayer.outputDevice(DFPLAYER_DEVICE_FLASH);

  //----Mp3 control----
  //  myDFPlayer.sleep();     //sleep
  //  myDFPlayer.reset();     //Reset the module
  //  myDFPlayer.enableDAC();  //Enable On-chip DAC
  //  myDFPlayer.disableDAC();  //Disable On-chip DAC
  //  myDFPlayer.outputSetting(true, 15); //output setting, enable the output and set the gain to 15

  //----Mp3 play----
  myDFPlayer.next();  //Play next mp3
  delay(1000);
  myDFPlayer.previous();  //Play previous mp3
  delay(1000);
  myDFPlayer.play(1);  //Play the first mp3
  delay(1000);
  myDFPlayer.loop(1);  //Loop the first mp3
  delay(1000);
  myDFPlayer.pause();  //pause the mp3
  delay(1000);
  myDFPlayer.start();  //start the mp3 from the pause
  delay(1000);
  myDFPlayer.playFolder(15, 4);  //play specific mp3 in SD:/15/004.mp3; Folder Name(1~99); File Name(1~255)
  delay(1000);
  myDFPlayer.enableLoopAll(); //loop all mp3 files.
  delay(1000);
  myDFPlayer.disableLoopAll(); //stop loop all mp3 files.
  delay(1000);
  myDFPlayer.playMp3Folder(4); //play specific mp3 in SD:/MP3/0004.mp3; File Name(0~65535)
  delay(1000);
  myDFPlayer.advertise(3); //advertise specific mp3 in SD:/ADVERT/0003.mp3; File Name(0~65535)
  delay(1000);
  myDFPlayer.stopAdvertise(); //stop advertise
  delay(1000);
  myDFPlayer.playLargeFolder(2, 999); //play specific mp3 in SD:/02/004.mp3; Folder Name(1~10); File Name(1~1000)
  delay(1000);
  myDFPlayer.loopFolder(5); //loop all mp3 files in folder SD:/05.
  delay(1000);
  myDFPlayer.randomAll(); //Random play all the mp3.
  delay(1000);
  myDFPlayer.enableLoop(); //enable loop.
  delay(1000);
  myDFPlayer.disableLoop(); //disable loop.
  delay(1000);

  //----Read imformation----
  Serial.println(myDFPlayer.readState()); //read mp3 state
  Serial.println(myDFPlayer.readVolume()); //read current volume
  Serial.println(myDFPlayer.readEQ()); //read EQ setting
  Serial.println(myDFPlayer.readFileCounts()); //read all file counts in SD card
  Serial.println(myDFPlayer.readCurrentFileNumber()); //read current play file number
  Serial.println(myDFPlayer.readFileCountsInFolder(3)); //read file counts in folder SD:/03
  // * 6. Fan (Motor driver)
  pinMode(EN_FAN, OUTPUT);
  pinMode(IN1_FAN, OUTPUT);
  pinMode(IN2_FAN, OUTPUT);
  // * 7. Checkpoint game (Ultrasonic_Onthetable)
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  Serial.begin(9600);
  // * 8. Vending Machine (Motor driver)
  pinMode(EN_VM, OUTPUT);
  pinMode(IN3_VM, OUTPUT);
  pinMode(IN4_VM, OUTPUT);
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*TABLE FOR FUNCTION
   Light_on //Hardware
   Light_off //Hardware
   Music //Hardware
   int Read() //Hardware
   int SelectABCD() 
   int quickSelectABCD() 
   void checkpoint()
   void Crack_code()
   void swipe()
   void fill_in_blank()
   void snack(float ReadingTime) ////Hardware
*/

void Light_on() {
  Intensity = map(650, 1, 1024, 100, 0); // analogRead(analog_pin), min_analog, max_analog, 100%, 0%);
  USE_SERIAL.println(Intensity);
  dimmer.setPower(Intensity); // 100%
}
void Light_off() {
  Intensity = map(0, 1, 1024, 100, 0); // analogRead(analog_pin), min_analog, max_analog, 100%, 0%);
  USE_SERIAL.println(Intensity);
  dimmer.setPower(Intensity); // 0%
}
void Music(int select_file) {
  int Delay_Time = 0;
  if (select_file == 1) {
    Delay_Time = ??;
  }
  if (select_file == 2) {
    Delay_Time = ??;
  }
  if (select_file == 3) {
    Delay_Time = ??;
  }
  myDFPlayer.playMp3Folder(select_file);
  delay(Delay_Time);
}
int Read() {
  int duration, distance;
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  distance = (duration / 2) / 29.41;
  //Serial.print(distance);
  //Serial.println(" cm");
  return distance;
  //Range 0-250
}

int SelectABCD() {
  int Answer ; //A=1, B=2, C=3 and D=4
  delay(100);
  boolean AlreadyAnswer = false;
  while (AlreadyAnswer == false) {
    int distance = Read();
    int check1 = 0;
    int check2 = 0;
    int check3 = 0;
    int check4 = 0;
    delay(500);
    for (int freeze1 = 0; freeze1 < 3; freeze1 ++) {
      if (distance < 10) {
        Answer = 1;
        check1 += 1;
      }
      else if (distance > 10 and distance < 20) {
        Answer = 2;
        check2 += 1;

      }
      else if (distance > 20 and distance < 30) {
        Answer = 3;
        check3 += 1;

      }
      else if (distance > 30 and distance < 40) {
        Answer = 4;
        check4 += 1;

      }
      delay(300);
    }
    if (check1 == 3) {
      Serial.println("A");
      AlreadyAnswer = true;
    }
    else if (check2 == 3) {
      Serial.println("B");
      AlreadyAnswer = true;
    }
    else if (check3 == 3) {
      Serial.println("C");
      AlreadyAnswer = true;
    }
    else if (check4 == 3) {
      Serial.println("D");
      AlreadyAnswer = true;
    }
  }

  return Answer;
}
int quickSelectABCD() {
  int Answer ; //A=1, B=2, C=3 and D=4
  delay(100);
  boolean AlreadyAnswer = false;
  while (AlreadyAnswer == false) {
    int distance = Read();
    int check1 = 0;
    int check2 = 0;
    int check3 = 0;
    int check4 = 0;
    delay(100);
    for (int freeze1 = 0; freeze1 < 3; freeze1 ++) {
      if (distance < 10) {
        Answer = 1;
        check1 += 1;
      }
      else if (distance > 10 and distance < 20) {
        Answer = 2;
        check2 += 1;

      }
      else if (distance > 20 and distance < 30) {
        Answer = 3;
        check3 += 1;

      }
      else if (distance > 30 and distance < 40) {
        Answer = 4;
        check4 += 1;

      }
      delay(50);
    }
    if (check1 == 3) {
      Serial.println("A");
      AlreadyAnswer = true;
    }
    else if (check2 == 3) {
      Serial.println("B");
      AlreadyAnswer = true;
    }
    else if (check3 == 3) {
      Serial.println("C");
      AlreadyAnswer = true;
    }
    else if (check4 == 3) {
      Serial.println("D");
      AlreadyAnswer = true;
    }
  }

  return Answer;
}
void checkpoint() {
  Serial.println("It's time to break");
  Serial.println("Let's play a mini-game");
  Crack_code();
}
void Crack_code() {
  boolean pass = false;
  Serial.println("Instructions:");
  Serial.println("Crack the following code");
  delay(1000);
  while (pass != true) {
    Serial.println("ABACCBDA");
    Serial.println("^       ");
    int ans = SelectABCD();
    if (ans == 1) {
      pass = true;
    }
    else {
      Serial.println("Try Again");
    }
  }
  pass = false;
  Serial.println(" BACCBDA");
  Serial.println(" ^      ");
  while (pass != true) {
    if (SelectABCD() == answer[1]) {
      pass = true;
    }
    else {
      Serial.println("Try Again");
    }
  }
  pass = false;
  Serial.println("  ACCBDA");
  Serial.println("  ^     ");
  while (pass != true) {
    if (SelectABCD() == answer[2]) {
      pass = true;
    }
    else {
      Serial.println("Try Again");
    }
  }
  pass = false;
  Serial.println("   CCBDA");
  Serial.println("   ^     ");
  while (pass != true) {
    if (SelectABCD() == answer[3]) {
      pass = true;
    }
    else {
      Serial.println("Try Again");
    }
  }
  pass = false;
  Serial.println("    CBDA");
  Serial.println("    ^   ");
  while (pass != true) {
    if (SelectABCD() == answer[4]) {
      pass = true;
    }
    else {
      Serial.println("Try Again");
    }
  }
  pass = false;
  while (pass != true) {
    Serial.println("     BDA");
    Serial.println("     ^  ");
    if (SelectABCD() == answer[5]) {
      pass = true;
    }
    else {
      Serial.println("Try Again");
    }
  }
  pass = false;
  Serial.println("      DA");
  Serial.println("      ^ ");
  while (pass != true) {

    if (SelectABCD() == answer[6]) {
      pass = true;
    }
    else {
      Serial.println("Try Again");
    }
  }
  pass = false;
  Serial.println("        A");
  Serial.println("        ^");
  while (pass != true) {
    if (SelectABCD() == answer[7]) {
      pass = true;
    }
    else {
      Serial.println("Try Again");
    }
  }
  if (pass == true) {
    Serial.println("Congratulations! You win!!!");
  }
}
void swipe() {
  int check = 0;
  int check2 = 0;
  int pass = false;
  int v_avg;
  int v_avg2;
  int v_avg3;
  int start_dis;
  int end_dis;
  int ttime1;
  int ttime2;
  int ttime3;
  int ttime4;
  int ttime5;
  int ttime6;
  //check variable at every point
  Serial.println("Instructions:");
  Serial.println("Swipe your hand");
  Serial.println("From A to D");
  delay(500);
  ttime1 = millis();
  while (quickSelectABCD() != 4) {
    if (quickSelectABCD() == 1) {
      check = 1;
    }
  }
  ttime2 = millis();
  delay(300);
  v_avg = 30 / ((ttime2 - ttime1) * 0.001);
  Serial.println(ttime1);
  Serial.println(ttime2);
  Serial.println((v_avg) * 10);
  if (check == 1 and v_avg * 10 >= 100) {
    pass = true;
  }
  else {
    check = 0;
    Serial.println("Try again");
  }
  if (pass == true) {
    pass = false ;
    Serial.println("Great!");
    delay(500);
    Serial.println("Level UP >>>");
    delay(300);
    Serial.println("Swipe your hand");
    Serial.println("From A to D");
    delay(300);
    Serial.println("Faster");
    ttime3 = millis();
    while (quickSelectABCD() != 4) {
      if (quickSelectABCD() == 1) {
        check = 1;
      }
    }
    ttime4 = millis();

    v_avg2 = 30 / ((ttime4 - ttime3) * 0.001);
    if (check == 1 and v_avg2 * 10 >= 120) {
      pass = true;
    }
    else {
      Serial.println("Try again");
    }
    if (pass == true) {
      pass = false;
      Serial.println("Great!");
      delay(500);
      Serial.println("Level UP >>>>>>>>>>>>>");
      delay(300);
      Serial.println("Last level !!!");
      Serial.println("Swipe your hand");
      Serial.println("From A to D");
      delay(300);
      Serial.println("More fasterrrrrrrrrrrr");
      ttime5 = millis();
      while (quickSelectABCD() != 4) {
        if (quickSelectABCD() == 1) {
          check = 1;
        }
      }
      ttime6 = millis();

      v_avg3 = 30 / ((ttime6 - ttime5) * 0.001);
      if (check == 1 and v_avg3 * 10 >= 150) {
        pass = true;
      }
      else {
        Serial.println("Try again");
      }
      if (pass == true) {
        pass = false;
        Serial.println("Congratulations, You are super fast !");
      }
    }
  }
}
void fill_in_blank() {
  int score = 0;
  Serial.println("Instructions: ");
  delay(300);
  Serial.println("Fill in the missing alphabet");
  delay(300);
  Serial.println("You have 2 seconds for each puzzle");
  delay(300);
  Serial.println("Pin_apple");
  delay(300);
  Serial.print("A) i          ");
  Serial.println("B) e        ");
  Serial.print("C) t          ");
  Serial.println("D) d        ");
  delay(2000);
  if (SelectABCD() == 2) {
    Serial.println("score +1");
    score += 1;
  }
  Serial.println("Su_ermarket");
  delay(500);
  Serial.print("A) f         ");
  Serial.println("B) p        ");
  Serial.print("C) s          ");
  Serial.println("D) b        ");
  delay(2000);
  if (SelectABCD() == 2) {
    Serial.println("score +1");
    score += 1;
  }
  Serial.println("Billion_ire");
  delay(500);
  Serial.print("A) o          ");
  Serial.println("B) e        ");
  Serial.print("C) a          ");
  Serial.println("D) f        ");
  delay(2000);
  if (SelectABCD() == 3) {
    Serial.println("score +1");
    score += 1;
  }
  Serial.println("Mo_ntain");
  delay(500);
  Serial.print("A)e          ");
  Serial.println("B) a        ");
  Serial.print("C) u          ");
  Serial.println("D) o        ");
  delay(2000);
  if (SelectABCD() == 3) {
    Serial.println("score +1");
    score += 1;
  }
  Serial.println("De_tination");
  delay(500);
  Serial.print("A) s        ");
  Serial.println("B) x      ");
  Serial.print("C) p        ");
  Serial.println("D) c      ");
  delay(2000);
  if (SelectABCD() == 1) {
    Serial.println("score +2");
    score += 2;
  }
  Serial.println("Bonus one!");
  delay(300);
  Serial.println("E_gen va_ues");
  delay(500);
  Serial.print("A) u,g        ");
  Serial.println("B) t,l      ");
  Serial.print("C) r,n        ");
  Serial.println("D) i,l      ");
  delay(2000);
  if (SelectABCD() == 4) {
    Serial.println("score +3");
    score += 3;
  }
  Serial.println("Your score is ");
  Serial.println(score);
  score = 0;
}

void snack(float ReadingTime) {
  float Time = ReadingTime;
  if (Time >= 30) {
    // set direction - forward
    digitalWrite(IN1, HIGH);
    digitalWrite(IN2, LOW);
    // speed control – full speed
    analogWrite(ENA, 60);
    delay(50000);//We still need to find the specific time for 1 loop
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, LOW);
  }

  if (Time >= 60) {
    // set direction - forward
    digitalWrite(IN3, HIGH);
    digitalWrite(IN4, LOW);
    // speed control – full speed
    analogWrite(ENB, 254);
    delay(1000); //We still need to find the specific time for 1 loop
    digitalWrite(IN3, LOW);
    digitalWrite(IN4, LOW);
  }
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void loop() {


}
